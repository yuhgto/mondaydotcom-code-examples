"""
Your monday.com account
"""
type Account {
  """
  The number of active member users in the account
  """
  active_members_count: Int

  """
  The account's country two-letter code in ISO3166 format
  """
  country_code: String

  """
  The first day of the week for the account (sunday / monday)
  """
  first_day_of_the_week: FirstDayOfTheWeek!

  """
  The account's unique identifier.
  """
  id: ID!

  """
  The account's logo.
  """
  logo: String

  """
  The account's name.
  """
  name: String!

  """
  The account's payment plan.
  """
  plan: Plan

  """
  The account's active products
  """
  products: [AccountProduct]

  """
  Show weekends in timeline
  """
  show_timeline_weekends: Boolean!

  """
  The product the account signed up to first.
  """
  sign_up_product_kind: String

  """
  The account's slug.
  """
  slug: String!

  """
  The account's tier.
  """
  tier: String
}

"""
The product a workspace is used in.
"""
type AccountProduct {
  """
  The account product default workspace id
  """
  default_workspace_id: ID

  """
  The account product id
  """
  id: ID

  """
  The account product kind (core / marketing / crm / software /
  projectManagement / project_management / service / forms / whiteboard).
  """
  kind: String
}

"""
An activity log event
"""
type ActivityLogType {
  """
  """
  account_id: String!

  """
  """
  created_at: String!

  """
  The item's column values in string form.
  """
  data: String!

  """
  """
  entity: String!

  """
  """
  event: String!

  """
  """
  id: String!

  """
  """
  user_id: String!
}

"""
An app install details.
"""
type AppInstall {
  """
  The app's unique identifier.
  """
  app_id: ID!

  """
  An app installer's account details.
  """
  app_install_account: AppInstallAccount!

  """
  An app installer's user details
  """
  app_install_user: AppInstallUser!

  """
  The app's version details
  """
  app_version: AppVersion

  """
  The required and approved scopes for an app install.
  """
  permissions: AppInstallPermissions

  """
  Installation date
  """
  timestamp: String
}

"""
An app installer's account details
"""
type AppInstallAccount {
  """
  The app's installer account id.
  """
  id: ID!
}

"""
The required and approved scopes for an app install.
"""
type AppInstallPermissions {
  """
  The scopes approved by the account admin
  """
  approved_scopes: [String!]!

  """
  The scopes required by the latest live version
  """
  required_scopes: [String!]!
}

"""
An app installer's user details
"""
type AppInstallUser {
  """
  The app's installer user id.
  """
  id: ID
}

"""
The app monetization status for the current account
"""
type AppMonetizationStatus {
  """
  Is apps monetization is supported for the account
  """
  is_supported: Boolean!
}

"""
The account subscription details for the app.
"""
type AppSubscription {
  """
  The type of the billing period [monthly/yearly].
  """
  billing_period: String

  """
  The number of days left until the subscription ends.
  """
  days_left: Int

  """
  Is the subscription a trial
  """
  is_trial: Boolean

  """
  The subscription plan id (on the app's side).
  """
  plan_id: String!

  """
  The pricing version of subscription plan.
  """
  pricing_version: Int

  """
  The subscription renewal date.
  """
  renewal_date: Date!
}

"""
The Operations counter response for the app action.
"""
type AppSubscriptionOperationsCounter {
  """
  The account subscription details for the app.
  """
  app_subscription: AppSubscription

  """
  The new counter value.
  """
  counter_value: Int

  """
  Operations name.
  """
  kind: String!

  """
  Window key.
  """
  period_key: String
}

"""
An app's version details.
"""
type AppVersion {
  """
  The app's major version.
  """
  major: Int!

  """
  The app's minor version.
  """
  minor: Int!

  """
  The app's patch version.
  """
  patch: Int!

  """
  The app's version text
  """
  text: String!

  """
  The app's version type.
  """
  type: String
}

"""
The app monetization information for the current account
"""
type AppsMonetizationInfo {
  """
  The number of seats in the account, across all products, used to match the
  appâ€™s subscription among apps that utilize the seats-based monetization method
  """
  seats_count: Int
}

"""
A file uploaded to monday.com
"""
type Asset {
  """
  The file's creation date.
  """
  created_at: Date

  """
  The file's extension.
  """
  file_extension: String!

  """
  The file's size in bytes.
  """
  file_size: Int!

  """
  The file's unique identifier.
  """
  id: ID!

  """
  The file's name.
  """
  name: String!

  """
  original geometry of the asset.
  """
  original_geometry: String

  """
  public url to the asset, valid for 1 hour.
  """
  public_url: String!

  """
  The user who uploaded the file.
  """
  uploaded_by: User!

  """
  url to view the asset.
  """
  url: String!

  """
  url to view the asset in thumbnail mode. Only available for images.
  """
  url_thumbnail: String
}

"""
The source of the asset
"""
enum AssetsSource {
  """
  Assets from file columns and item's files gallery
  """
  all

  """
  Assets only from file columns
  """
  columns

  """
  Assets only from item's files gallery
  """
  gallery
}

"""
Result of an batch operation
"""
type BatchExtendTrialPeriod {
  """
  Details of operations
  """
  details: [ExtendTrialPeriod!]

  """
  Reason of an error
  """
  reason: String

  """
  Result of a batch operation
  """
  success: Boolean!
}

"""
A monday.com board.
"""
type Board {
  """
  The board log events.
  """
  activity_logs(
    """
    Column ids to filter
    """
    column_ids: [String]

    """
    From timestamp (ISO8601)
    """
    from: ISO8601DateTime

    """
    Group ids to filter
    """
    group_ids: [String]

    """
    Item id to filter
    """
    item_ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1

    """
    To timestamp (ISO8601)
    """
    to: ISO8601DateTime

    """
    User ids to filter.
    """
    user_ids: [ID!]
  ): [ActivityLogType]

  """
  The board's folder unique identifier.
  """
  board_folder_id: ID

  """
  The board's kind (public / private / share).
  """
  board_kind: BoardKind!

  """
  The board's visible columns.
  """
  columns(
    """
    A list of column unique identifiers.
    """
    ids: [String]

    """
    A list of column types.
    """
    types: [ColumnType!]
  ): [Column]

  """
  Get the board communication value - typically meeting ID
  """
  communication: JSON

  """
  The creator of the board.
  """
  creator: User!

  """
  The board's description.
  """
  description: String

  """
  The board's visible groups.
  """
  groups(
    """
    A list of group unique identifiers.
    """
    ids: [String]
  ): [Group]

  """
  The unique identifier of the board.
  """
  id: ID!

  """
  The Board's item nickname, one of a predefined set of values, or a custom user value
  """
  item_terminology: String

  """
  The number of items on the board
  """
  items_count: Int

  """
  The board's items (rows).
  """
  items_page(
    """
    An opaque token representing the position in the result set from which to
    resume fetching items. Use this to paginate through large result sets.
    """
    cursor: String

    """
    The maximum number of items to fetch in a single request. Use this to
    control the size of the result set and manage pagination. Maximum: 500.
    """
    limit: Int! = 25

    """
    A set of parameters to filter, sort, and control the scope of the items
    query. Use this to customize the results based on specific criteria.
    """
    query_params: ItemsQuery
  ): ItemsResponse!

  """
  The board's name.
  """
  name: String!

  """
  The owner of the board.
  """
  owner: User! @deprecated(reason: "This field returned creator of the board. Please use 'creator' or 'owners' fields instead.")

  """
  List of user board owners
  """
  owners: [User]!

  """
  The board's permissions.
  """
  permissions: String!

  """
  The board's state (all / active / archived / deleted).
  """
  state: State!

  """
  The board's subscribers.
  """
  subscribers: [User]!

  """
  The board's specific tags.
  """
  tags: [Tag]

  """
  List of team board owners
  """
  team_owners(
    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Team!]

  """
  The board's team subscribers.
  """
  team_subscribers(
    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Team!]

  """
  The top group at this board.
  """
  top_group: Group!

  """
  The board object type.
  """
  type: BoardObjectType

  """
  The last time the board was updated at.
  """
  updated_at: ISO8601DateTime

  """
  The board's updates.
  """
  updates(
    """
    A list of items unique identifiers.
    """
    ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Update]

  """
  The Board's url
  """
  url: String!

  """
  The board's views.
  """
  views(
    """
    A list of view unique identifiers.
    """
    ids: [ID!]

    """
    The view's type
    """
    type: String
  ): [BoardView]

  """
  The workspace that contains this board (null for main workspace).
  """
  workspace: Workspace

  """
  The board's workspace unique identifier (null for main workspace).
  """
  workspace_id: ID
}

"""
The board attributes available.
"""
enum BoardAttributes {
  """
  Object that contains available Video conferences on the board.
  """
  communication

  """
  Board description.
  """
  description

  """
  Board name.
  """
  name
}

"""
A board duplication
"""
type BoardDuplication {
  """
  The new board created by the duplication
  """
  board: Board!

  """
  Was the board duplication performed asynchronously
  """
  is_async: Boolean!
}

"""
The board kinds available.
"""
enum BoardKind {
  """
  Private boards.
  """
  private

  """
  Public boards.
  """
  public

  """
  Shareable boards.
  """
  share
}

"""
The board object types.
"""
enum BoardObjectType {
  """
  Parent Board.
  """
  board

  """
  Custom Object.
  """
  custom_object

  """
  Document.
  """
  document

  """
  Sub Items Board.
  """
  sub_items_board
}

type BoardRelationValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  A string representing all the names of the linked items, separated by commas
  """
  display_value: String!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The linked items IDs
  """
  linked_item_ids: [ID!]!

  """
  The linked items.
  """
  linked_items: [Item!]!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
The board subscriber kind.
"""
enum BoardSubscriberKind {
  """
  Board owner.
  """
  owner

  """
  Board subscriber.
  """
  subscriber
}

"""
A board's view.
"""
type BoardView {
  """
  The view's unique identifier.
  """
  id: ID!

  """
  The view's name.
  """
  name: String!

  """
  The view's settings in a string form.
  """
  settings_str: String!

  """
  The view's template id if it was duplictated from other
  """
  source_view_id: ID

  """
  The view's type.
  """
  type: String!

  """
  Specific board view data (supported only for forms)
  """
  view_specific_data_str: String!
}

"""
Options to order by.
"""
enum BoardsOrderBy {
  """
  The rank order of the board creation time (desc).
  """
  created_at

  """
  The last time the user making the request used the board (desc).
  """
  used_at
}

type ButtonValue implements ColumnValue {
  """
  The button's color in hex value.
  """
  color: String

  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The button's label.
  """
  label: String
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
The result of adding users to / removing users from a team.
"""
type ChangeTeamMembershipsResult {
  """
  The users that team membership update failed for
  """
  failed_users: [User!]

  """
  The users that team membership update succeeded for
  """
  successful_users: [User!]
}

type CheckboxValue implements ColumnValue {
  """
  The column's boolean value.
  """
  checked: Boolean

  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date
  value: JSON
}

type ColorPickerValue implements ColumnValue {
  """
  The color in hex value.
  """
  color: String

  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type Column {
  """
  Is the column archived or not.
  """
  archived: Boolean!

  """
  The column's description.
  """
  description: String

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The column's settings in a string form.
  """
  settings_str: String!

  """
  The column's title.
  """
  title: String!

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's width.
  """
  width: Int
}

"""
An object defining a mapping of column between source board and destination board
"""
input ColumnMappingInput {
  """
  The source column's unique identifier.
  """
  source: ID!

  """
  The target column's unique identifier.
  """
  target: ID
}

"""
The property name of the column to be changed.
"""
enum ColumnProperty {
  """
  the column description.
  """
  description

  """
  the column title.
  """
  title
}

"""
The columns to create.
"""
enum ColumnType {
  """
  Number items according to their order in the group/board
  """
  auto_number

  """
  Connect data from other boards
  """
  board_relation

  """
  Perform actions on items by clicking a button
  """
  button

  """
  Check off items and see what's done at a glance
  """
  checkbox

  """
  Manage a design system using a color palette
  """
  color_picker

  """
  Choose a country
  """
  country

  """
  Add the item's creator and creation date automatically
  """
  creation_log

  """
  Add dates like deadlines to ensure you never drop the ball
  """
  date

  """
  Set up dependencies between items in the board
  """
  dependency

  """
  Instantly add collaborative rich text editor
  """
  doc

  """
  Create a dropdown list of options
  """
  dropdown

  """
  Email team members and clients directly from your board
  """
  email

  """
  Add files & docs to your item
  """
  file

  """
  Use functions to manipulate data across multiple columns
  """
  formula
  group

  """
  Add times to manage and schedule tasks, shifts and more
  """
  hour

  """
  Integration is really cool...
  """
  integration

  """
  Show all item's assignees
  """
  item_assignees

  """
  Show a unique ID for each item
  """
  item_id

  """
  Add the person that last updated the item and the date
  """
  last_updated

  """
  Simply hyperlink to any website
  """
  link

  """
  Place multiple locations on a geographic map
  """
  location

  """
  Add large amounts of text without changing column width
  """
  long_text

  """
  Show and edit columns' data from connected boards
  """
  mirror

  """
  Name is really cool...
  """
  name

  """
  Add revenue, costs, time estimations and more
  """
  numbers

  """
  Assign people to improve team work
  """
  people

  """
  Assign a person to increase ownership and accountability (deprecated)
  """
  person

  """
  Call your contacts directly from monday.com
  """
  phone

  """
  Show progress by combining status columns in a battery
  """
  progress

  """
  Rate or rank anything visually
  """
  rating

  """
  Get an instant overview of where things stand
  """
  status

  """
  Use the subtasks column to create another level of tasks
  """
  subtasks

  """
  Add tags to categorize items across multiple boards
  """
  tags

  """
  Assign a full team to an item 
  """
  team

  """
  Add textual information e.g. addresses, names or keywords
  """
  text

  """
  Easily track time spent on each item, group, and board
  """
  time_tracking

  """
  Visualize your itemâ€™s duration, with a start and end date
  """
  timeline

  """
  Unsupported column type
  """
  unsupported

  """
  Vote on an item e.g. pick a new feature or a favorite lunch place
  """
  vote

  """
  Select the week on which each item should be completed
  """
  week

  """
  Keep track of the time anywhere in the world
  """
  world_clock
}

interface ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

scalar CompareValue

"""
Complexity data.
"""
type Complexity {
  """
  The remainder of complexity after the query's execution.
  """
  after: Int!

  """
  The remainder of complexity before the query's execution.
  """
  before: Int!

  """
  The specific query's complexity.
  """
  query: Int!

  """
  How long in seconds before the complexity budget is reset
  """
  reset_in_x_seconds: Int!
}

type Country {
  """
  The country's two-letter code.
  """
  code: String!

  """
  The country's name.
  """
  name: String!
}

type CountryValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The country value.
  """
  country: Country

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type CreationLogValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The date when the item was created.
  """
  created_at: Date!

  """
  User who created the item
  """
  creator: User!

  """
  ID of the user who created the item
  """
  creator_id: ID!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A date.
"""
scalar Date

type DateValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's date value.
  """
  date: String

  """
  The string representation of selected icon.
  """
  icon: String

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The formatted date and time in user time zone.
  """
  text: String

  """
  The column's time value.
  """
  time: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type DependencyValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  A string representing all the names of the linked items, separated by commas
  """
  display_value: String!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The linked items ids
  """
  linked_item_ids: ID!

  """
  The linked items.
  """
  linked_items: [Item!]!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
Various documents blocks types, such as text.
"""
enum DocBlockContentType {
  """
  Board block
  """
  board

  """
  Bulleted list block
  """
  bulleted_list

  """
  Check list block
  """
  check_list

  """
  Code block
  """
  code

  """
  Divider block
  """
  divider

  """
  Image block
  """
  image

  """
  Large title block
  """
  large_title

  """
  Layout block
  """
  layout

  """
  Medium title block
  """
  medium_title

  """
  Simple text block
  """
  normal_text

  """
  Notice block
  """
  notice_box

  """
  Numbered list block
  """
  numbered_list

  """
  Quote text block
  """
  quote

  """
  Small title block
  """
  small_title

  """
  Table block
  """
  table

  """
  Video block
  """
  video

  """
  Widget block
  """
  widget
}

type DocValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The document file attached to the column.
  """
  file: FileDocValue

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
Options to order by.
"""
enum DocsOrderBy {
  """
  The rank order of the document creation time (desc).
  """
  created_at

  """
  The last time the user making the request viewd the document (desc).
  """
  used_at
}

"""
A monday.com document.
"""
type Document {
  """
  The document's content blocks
  """
  blocks(
    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [DocumentBlock]

  """
  The document's creation date.
  """
  created_at: Date

  """
  The document's creator
  """
  created_by: User

  """
  The document's folder unique identifier (null for first level).
  """
  doc_folder_id: ID

  """
  The document's kind (public / private / share).
  """
  doc_kind: BoardKind!

  """
  The document's unique identifier.
  """
  id: ID!

  """
  The document's name.
  """
  name: String!

  """
  The associated board or object's unique identifier.
  """
  object_id: ID!

  """
  The document's relative url
  """
  relative_url: String

  """
  The document's settings.
  """
  settings: JSON

  """
  The document's direct url
  """
  url: String

  """
  The workspace that contains this document (null for main workspace).
  """
  workspace: Workspace

  """
  The document's workspace unique identifier (null for main workspace).
  """
  workspace_id: ID
}

"""
A monday.com document block.
"""
type DocumentBlock {
  """
  The block's content.
  """
  content: JSON

  """
  The block's creation date.
  """
  created_at: Date

  """
  The block's creator
  """
  created_by: User

  """
  The block's document unique identifier.
  """
  doc_id: ID

  """
  The block's unique identifier.
  """
  id: String!

  """
  The block's parent block unique identifier.
  """
  parent_block_id: String

  """
  The block's position on the document.
  """
  position: Float

  """
  The block content type.
  """
  type: String

  """
  The block's last updated date.
  """
  updated_at: Date
}

"""
A monday.com doc block.
"""
type DocumentBlockIdOnly {
  """
  The block's unique identifier.
  """
  id: String!
}

type DropdownValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON

  """
  The selected dropdown values.
  """
  values: [DropdownValueOption!]!
}

type DropdownValueOption {
  """
  The dropdown item's unique identifier.
  """
  id: ID!

  """
  The dropdown item's label.
  """
  label: String!
}

"""
The board duplicate types available.
"""
enum DuplicateBoardType {
  """
  Duplicate board with structure and items.
  """
  duplicate_board_with_pulses

  """
  Duplicate board with structure, items and updates.
  """
  duplicate_board_with_pulses_and_updates

  """
  Duplicate board with structure.
  """
  duplicate_board_with_structure
}

type EmailValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's email value.
  """
  email: String

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The column's text value. It can be the same as email when user didn't enter any text.
  """
  label: String

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
Result of a single operation
"""
type ExtendTrialPeriod {
  """
  Account slug
  """
  account_slug: String!

  """
  Reason of an error
  """
  reason: String

  """
  Result of a single operation
  """
  success: Boolean!
}

"""
A multipart file
"""
scalar File

type FileAssetValue {
  """
  The asset associated with the file.
  """
  asset: Asset!

  """
  The asset's id.
  """
  asset_id: ID!

  """
  The file's creation date.
  """
  created_at: Date!

  """
  The user who created the file.
  """
  creator: User

  """
  The ID of user who created the file.
  """
  creator_id: ID

  """
  Whether the file is an image.
  """
  is_image: Boolean!

  """
  The file's name.
  """
  name: String!
}

type FileDocValue {
  """
  The file's creation date.
  """
  created_at: Date!

  """
  The user who created the file.
  """
  creator: User

  """
  The ID of user who created the file.
  """
  creator_id: ID

  """
  The doc associated with the file.
  """
  doc: Document!

  """
  The file's unique identifier.
  """
  file_id: ID!

  """
  The associated board or object's unique identifier.
  """
  object_id: ID!

  """
  The file's url.
  """
  url: String
}

type FileLinkValue {
  """
  The file's creation date.
  """
  created_at: Date!

  """
  The user who created the file.
  """
  creator: User

  """
  The ID of user who created the file.
  """
  creator_id: ID

  """
  The file's id.
  """
  file_id: ID!

  """
  The file's kind.
  """
  kind: FileLinkValueKind!

  """
  The file's name.
  """
  name: String!

  """
  The file's url.
  """
  url: String
}

"""
The type of a link value stored inside a file column
"""
enum FileLinkValueKind {
  """
  Box file
  """
  box

  """
  Dropbox file
  """
  dropbox

  """
  Google Drive file
  """
  google_drive

  """
  Generic link file
  """
  link

  """
  OneDrive file
  """
  onedrive
}

type FileValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The files attached to the column.
  """
  files: [FileValueItem!]!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A single file in a column.
"""
union FileValueItem = FileAssetValue | FileDocValue | FileLinkValue

"""
The first day of work week
"""
enum FirstDayOfTheWeek {
  """
  Monday
  """
  monday

  """
  Sunday
  """
  sunday
}

"""
A workspace folder containing boards, docs, sub folders, etc.
"""
type Folder {
  """
  The various items in the folder, not including sub-folders and dashboards.
  """
  children: [Board]!

  """
  The folder's color.
  """
  color: FolderColor

  """
  The folder's creation date.
  """
  created_at: Date!

  """
  The folder's custom icon.
  """
  custom_icon: FolderCustomIcon

  """
  The folder's font weight.
  """
  font_weight: FolderFontWeight

  """
  The folder's unique identifier.
  """
  id: ID!

  """
  The folder's name.
  """
  name: String!

  """
  The folder's user owner unique identifier.
  """
  owner_id: ID

  """
  The folder's parent folder.
  """
  parent: Folder

  """
  Sub-folders inside this folder.
  """
  sub_folders: [Folder]!

  """
  The workspace that contains this folder (null id for main workspace).
  """
  workspace: Workspace!
}

"""
One value out of a list of valid folder colors
"""
enum FolderColor {
  """
  aquamarine
  """
  AQUAMARINE

  """
  bright-blue
  """
  BRIGHT_BLUE

  """
  bright-green
  """
  BRIGHT_GREEN

  """
  chili-blue
  """
  CHILI_BLUE

  """
  dark-orange
  """
  DARK_ORANGE

  """
  dark_purple
  """
  DARK_PURPLE

  """
  dark-red
  """
  DARK_RED

  """
  done-green
  """
  DONE_GREEN

  """
  indigo
  """
  INDIGO

  """
  lipstick
  """
  LIPSTICK

  """
  No color
  """
  NULL

  """
  purple
  """
  PURPLE

  """
  sofia_pink
  """
  SOFIA_PINK

  """
  stuck-red
  """
  STUCK_RED

  """
  sunset
  """
  SUNSET

  """
  working_orange
  """
  WORKING_ORANGE
}

"""
One value out of a list of valid folder custom icons
"""
enum FolderCustomIcon {
  """
  Folder
  """
  FOLDER

  """
  MoreBelow
  """
  MOREBELOW

  """
  MoreBelowFilled
  """
  MOREBELOWFILLED

  """
  No custom icon
  """
  NULL

  """
  Work
  """
  WORK
}

"""
One value out of a list of valid folder font weights
"""
enum FolderFontWeight {
  """
  font-weight-bold
  """
  FONT_WEIGHT_BOLD

  """
  font-weight-light
  """
  FONT_WEIGHT_LIGHT

  """
  font-weight-normal
  """
  FONT_WEIGHT_NORMAL

  """
  font-weight-very-light
  """
  FONT_WEIGHT_VERY_LIGHT

  """
  No font weight
  """
  NULL
}

type FormulaValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A group of items in a board.
"""
type Group {
  """
  Is the group archived or not.
  """
  archived: Boolean

  """
  The group's color.
  """
  color: String!

  """
  Is the group deleted or not.
  """
  deleted: Boolean

  """
  The group's unique identifier.
  """
  id: ID!

  """
  The items in the group.
  """
  items_page(
    """
    An opaque token representing the position in the result set from which to
    resume fetching items. Use this to paginate through large result sets.
    """
    cursor: String

    """
    The maximum number of items to fetch in a single request. Use this to
    control the size of the result set and manage pagination. Maximum: 500.
    """
    limit: Int! = 25

    """
    A set of parameters to filter, sort, and control the scope of the items
    query. Use this to customize the results based on specific criteria.
    """
    query_params: ItemsQuery
  ): ItemsResponse!

  """
  The group's position in the board.
  """
  position: String!

  """
  The group's title.
  """
  title: String!
}

"""
The group attributes available.
"""
enum GroupAttributes {
  """
  Group color (one of the supported colors, check the API documentation).
  """
  color

  """
  The group's position in the board. Deprecated! - replaced with relative position
  """
  position

  """
  The group's relative position after another group in the board.
  """
  relative_position_after

  """
  The group's relative position before another group in the board.
  """
  relative_position_before

  """
  Group title.
  """
  title
}

type GroupValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The group value.
  """
  group: Group

  """
  The group identifier.
  """
  group_id: ID

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type HourValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  Hour
  """
  hour: Int

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Minute
  """
  minute: Int
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type IntegrationValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  ID of the entity
  """
  entity_id: ID

  """
  The column's unique identifier.
  """
  id: ID!

  """
  URL of the issue
  """
  issue_api_url: ID

  """
  ID of the issue
  """
  issue_id: String

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
An item (table row).
"""
type Item {
  """
  The item's assets/files.
  """
  assets(
    """
    The assets source (all / columns / gallery)
    """
    assets_source: AssetsSource

    """
    Ids of the columns you want to get assets from.
    """
    column_ids: [String]
  ): [Asset]

  """
  The board that contains this item.
  """
  board: Board

  """
  The item's column values.
  """
  column_values(
    """
    A list of column ids to return
    """
    ids: [String!]

    """
    A list of column types to return
    """
    types: [ColumnType!]
  ): [ColumnValue!]!

  """
  The item's create date.
  """
  created_at: Date

  """
  The item's creator.
  """
  creator: User

  """
  The unique identifier of the item creator.
  """
  creator_id: String!

  """
  The item's email.
  """
  email: String!

  """
  The group that contains this item.
  """
  group: Group

  """
  The item's unique identifier.
  """
  id: ID!

  """
  The item's linked items
  """
  linked_items(
    """
    The id of the link to item column
    """
    link_to_item_column_id: String!

    """
    The id of the linked board
    """
    linked_board_id: ID!
  ): [Item!]!

  """
  The item's name.
  """
  name: String!

  """
  The parent item of a subitem.
  """
  parent_item: Item

  """
  The item's relative path
  """
  relative_link: String

  """
  The item's state (all / active / archived / deleted).
  """
  state: State

  """
  The item's subitems.
  """
  subitems: [Item]

  """
  The pulses's subscribers.
  """
  subscribers: [User]!

  """
  The item's last update date.
  """
  updated_at: Date

  """
  The item's updates.
  """
  updates(
    """
    A list of items unique identifiers.
    """
    ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Update]

  """
  The item's link
  """
  url: String!
}

type ItemIdValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  ID of the item
  """
  item_id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
The direction to order the items by
"""
enum ItemsOrderByDirection {
  """
  Ascending order
  """
  asc

  """
  Descending order
  """
  desc
}

input ItemsPageByColumnValuesQuery {
  """
  The column's unique identifier.
  """
  column_id: String!

  """
  The column values to search items by.
  """
  column_values: [String]!
}

input ItemsQuery {
  """
  A list of rule groups
  """
  groups: [ItemsQueryGroup!]

  """
  A list of item IDs to fetch. Use this to fetch a specific set of items by their IDs. Max: 100 IDs
  """
  ids: [ID!]

  """
  The operator to use for the query rules or rule groups
  """
  operator: ItemsQueryOperator = and
  order_by: [ItemsQueryOrderBy!]

  """
  A list of rules
  """
  rules: [ItemsQueryRule!]
}

input ItemsQueryGroup {
  """
  A list of rule groups
  """
  groups: [ItemsQueryGroup!]

  """
  The operator to use for the query rules or rule groups
  """
  operator: ItemsQueryOperator = and

  """
  A list of rules
  """
  rules: [ItemsQueryRule!]
}

"""
The condition between the query rules
"""
enum ItemsQueryOperator {
  """
  Logical AND
  """
  and

  """
  Logical OR
  """
  or
}

input ItemsQueryOrderBy {
  column_id: String!
  direction: ItemsOrderByDirection = asc
}

input ItemsQueryRule {
  column_id: ID!
  compare_attribute: String
  compare_value: CompareValue!
  operator: ItemsQueryRuleOperator = any_of
}

"""
The operator to use for the value comparison
"""
enum ItemsQueryRuleOperator {
  """
  Any of the values
  """
  any_of

  """
  Between the two values
  """
  between

  """
  Contains all the terms
  """
  contains_terms

  """
  Contains the text
  """
  contains_text

  """
  Ends with the value
  """
  ends_with

  """
  Greater than the value
  """
  greater_than

  """
  Greater than or equal to the value
  """
  greater_than_or_equals

  """
  Empty value
  """
  is_empty

  """
  Not empty value
  """
  is_not_empty

  """
  Lower than the value
  """
  lower_than

  """
  Lower than or equal to the value
  """
  lower_than_or_equal

  """
  None of the values
  """
  not_any_of

  """
  Does not contain the text
  """
  not_contains_text

  """
  Starts with the value
  """
  starts_with

  """
  Within the last
  """
  within_the_last

  """
  Within the next 
  """
  within_the_next
}

type ItemsResponse {
  """
  An opaque cursor that represents the position in the list after the last
  returned item. Use this cursor for pagination to fetch the next set of items.
  If the cursor is null, there are no more items to fetch.
  """
  cursor: String

  """
  The items associated with the cursor.
  """
  items: [Item!]!
}

"""
A JSON formatted string.
"""
scalar JSON

"""
Kind of assignee
"""
enum Kind {
  """
  Represents a person
  """
  person

  """
  Represents a team
  """
  team
}

type LastUpdatedValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  Timestamp of the last time the item was updated
  """
  updated_at: Date

  """
  User who updated the item
  """
  updater: User

  """
  ID of the user who updated the item
  """
  updater_id: ID

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type LinkValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  Url
  """
  url: String

  """
  Url text
  """
  url_text: String

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type LocationValue implements ColumnValue {
  """
  Address
  """
  address: String

  """
  City
  """
  city: String

  """
  City
  """
  city_short: String

  """
  The column that this value belongs to.
  """
  column: Column!

  """
  Country
  """
  country: String

  """
  Country short name (e.g. PE for Peru)
  """
  country_short: String

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Latitude
  """
  lat: Float

  """
  Longitude
  """
  lng: Float

  """
  Place ID of the location
  """
  place_id: String

  """
  Street
  """
  street: String

  """
  Number of building in the street
  """
  street_number: String

  """
  Short number of building in the street
  """
  street_number_short: String

  """
  Street
  """
  street_short: String
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type LongTextValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type MirrorValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  A string representing all the names of the linked items, separated by commas
  """
  display_value: String!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The mirrored items.
  """
  mirrored_items: [MirroredItem!]!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type MirroredItem {
  """
  The linked board.
  """
  linked_board: Board!

  """
  The linked board's unique identifier.
  """
  linked_board_id: ID!

  """
  The linked item.
  """
  linked_item: Item!

  """
  The mirrored values.
  """
  mirrored_value: MirroredValue
}

"""
Represents a mirrored value (column value, group, or board).
"""
union MirroredValue = Board | BoardRelationValue | ButtonValue | CheckboxValue | ColorPickerValue | CountryValue | CreationLogValue | DateValue | DependencyValue | DocValue | DropdownValue | EmailValue | FileValue | FormulaValue | Group | GroupValue | HourValue | IntegrationValue | ItemIdValue | LastUpdatedValue | LinkValue | LocationValue | LongTextValue | MirrorValue | NumbersValue | PeopleValue | PersonValue | PhoneValue | ProgressValue | RatingValue | StatusValue | SubtasksValue | TagsValue | TeamValue | TextValue | TimeTrackingValue | TimelineValue | UnsupportedValue | VoteValue | WeekValue | WorldClockValue

"""
Update your monday.com data.
"""
type Mutation {
  """
  Add a file to a column value.
  """
  add_file_to_column(
    """
    The column to add the file to.
    """
    column_id: String!

    """
    The file to upload.
    """
    file: File!

    """
    The item to add the file to.
    """
    item_id: ID!
  ): Asset

  """
  Add a file to an update.
  """
  add_file_to_update(
    """
    The file to upload.
    """
    file: File!

    """
    The update to add the file to.
    """
    update_id: ID!
  ): Asset

  """
  Add subscribers to a board.
  """
  add_subscribers_to_board(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    Subscribers kind (subscriber / owner)
    """
    kind: BoardSubscriberKind = subscriber

    """
    User ids to subscribe to a board
    """
    user_ids: [ID!]!
  ): [User] @deprecated(reason: "use add_users_to_board instead")

  """
  Add teams subscribers to a board.
  """
  add_teams_to_board(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    Subscribers kind (subscriber / owner)
    """
    kind: BoardSubscriberKind = subscriber

    """
    Team ids to subscribe to a board
    """
    team_ids: [ID!]!
  ): [Team]

  """
  Add teams to a workspace.
  """
  add_teams_to_workspace(
    """
    Subscribers kind (subscriber / owner)
    """
    kind: WorkspaceSubscriberKind = subscriber

    """
    Team ids to subscribe to a workspace
    """
    team_ids: [ID!]!

    """
    The workspace's unique identifier.
    """
    workspace_id: ID!
  ): [Team]

  """
  Add subscribers to a board.
  """
  add_users_to_board(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    Subscribers kind (subscriber / owner)
    """
    kind: BoardSubscriberKind = subscriber

    """
    User ids to subscribe to a board
    """
    user_ids: [ID!]!
  ): [User]

  """
  Add users to team.
  """
  add_users_to_team(
    """
    The team's unique identifier.
    """
    team_id: ID!

    """
    User ids to add to/remove from the team
    """
    user_ids: [ID!]!
  ): ChangeTeamMembershipsResult

  """
  Add users to a workspace.
  """
  add_users_to_workspace(
    """
    Subscribers kind (subscriber / owner)
    """
    kind: WorkspaceSubscriberKind = subscriber

    """
    User ids to subscribe to a workspace
    """
    user_ids: [ID!]!

    """
    The workspace's unique identifier.
    """
    workspace_id: ID!
  ): [User]

  """
  Archive a board.
  """
  archive_board(
    """
    The board's unique identifier
    """
    board_id: ID!
  ): Board

  """
  Archives a group in a specific board.
  """
  archive_group(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The group's unique identifier.
    """
    group_id: String!
  ): Group

  """
  Archive an item.
  """
  archive_item(
    """
    The item's unique identifier.
    """
    item_id: ID
  ): Item

  """
  Extends trial period of an application to selected accounts
  """
  batch_extend_trial_period(
    """
    The accounts' slags. Max: 5
    """
    account_slugs: [String!]!

    """
    The id of an application.
    """
    app_id: ID!

    """
    The amount of days to extend a trial period. Max: 365
    """
    duration_in_days: Int!

    """
    The id of a payment plan.
    """
    plan_id: String!
  ): BatchExtendTrialPeriod

  """
  Change a column's properties
  """
  change_column_metadata(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The column's unique identifier.
    """
    column_id: String!

    """
    The property name of the column to be changed (title / description).
    """
    column_property: ColumnProperty

    """
    The new description of the column.
    """
    value: String
  ): Column

  """
  Change a column's title
  """
  change_column_title(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The column's unique identifier.
    """
    column_id: String!

    """
    The new title of the column.
    """
    title: String!
  ): Column

  """
  Change an item's column value.
  """
  change_column_value(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The column's unique identifier.
    """
    column_id: String!

    """
    Create Status/Dropdown labels if they're missing. (Requires permission to change board structure)
    """
    create_labels_if_missing: Boolean

    """
    The item's unique identifier.
    """
    item_id: ID

    """
    The new value of the column.
    """
    value: JSON!
  ): Item

  """
  Changes the column values of a specific item.
  """
  change_multiple_column_values(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The column values updates.
    """
    column_values: JSON!

    """
    Create Status/Dropdown labels if they're missing. (Requires permission to change board structure)
    """
    create_labels_if_missing: Boolean

    """
    The item's unique identifier.
    """
    item_id: ID
  ): Item

  """
  Change an item's column with simple value.
  """
  change_simple_column_value(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The column's unique identifier.
    """
    column_id: String!

    """
    Create Status/Dropdown labels if they're missing. (Requires permission to change board structure)
    """
    create_labels_if_missing: Boolean

    """
    The item's unique identifier.
    """
    item_id: ID

    """
    The new simple value of the column (pass null to empty the column).
    """
    value: String
  ): Item

  """
  Clear an item's updates.
  """
  clear_item_updates(
    """
    The item's unique identifier.
    """
    item_id: ID!
  ): Item

  """
  Get the complexity data of your mutations.
  """
  complexity: Complexity

  """
  Create a new board.
  """
  create_board(
    """
    The board's kind (public / private / share)
    """
    board_kind: BoardKind!

    """
    The board's name
    """
    board_name: String!

    """
    Optional board owner user ids
    """
    board_owner_ids: [ID!]

    """
    Optional board owner team ids
    """
    board_owner_team_ids: [ID!]

    """
    Optional board subscriber ids
    """
    board_subscriber_ids: [ID!]

    """
    Optional list of subscriber team ids
    """
    board_subscriber_teams_ids: [ID!]

    """
    Optional board's description
    """
    description: String

    """
    Optional flag to create an empty board (without any default items)
    """
    empty: Boolean = false

    """
    Optional board folder id
    """
    folder_id: ID

    """
    Optional board template id
    """
    template_id: ID

    """
    Optional workspace id
    """
    workspace_id: ID
  ): Board

  """
  Create a new column in board.
  """
  create_column(
    """
    The column's unique identifier after which the new column will be inserted.
    """
    after_column_id: ID

    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The type of column to create.
    """
    column_type: ColumnType!

    """
    The new column's defaults.
    """
    defaults: JSON

    """
    The new column's description.
    """
    description: String

    """
    The column's user-specified unique identifier.
    """
    id: String

    """
    The new column's title.
    """
    title: String!
  ): Column

  """
  Create new document block
  """
  create_doc_block(
    """
    After which block to insert this one. If not provided, will be inserted first in the document
    """
    after_block_id: String

    """
    The block's content.
    """
    content: JSON!

    """
    The doc's unique identifier.
    """
    doc_id: ID!

    """
    The parent block id to append the created block under.
    """
    parent_block_id: String

    """
    The block's content type.
    """
    type: DocBlockContentType!
  ): DocumentBlock

  """
  Creates a folder in a specific workspace.
  """
  create_folder(
    """
    The folder's color.
    """
    color: FolderColor

    """
    The folder's custom icon.
    """
    custom_icon: FolderCustomIcon

    """
    The folder's font weight.
    """
    font_weight: FolderFontWeight

    """
    The folder's name
    """
    name: String!

    """
    The folder's parent folder unique identifier.
    """
    parent_folder_id: ID

    """
    The unique identifier of the workspace to create this folder in
    """
    workspace_id: ID
  ): Folder

  """
  Creates a new group in a specific board.
  """
  create_group(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    A hex representing the group's color
    """
    group_color: String

    """
    The name of the new group.
    """
    group_name: String!

    """
    The group's position in the board. DEPRECATED! Replaced with relative position (position_relative_method, relative_to)
    """
    position: String

    """
    The position relative method to another group (before_at / after_at)
    """
    position_relative_method: PositionRelative

    """
    The group to set the position next to.
    """
    relative_to: String
  ): Group

  """
  Create a new item.
  """
  create_item(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The column values of the new item.
    """
    column_values: JSON

    """
    Create Status/Dropdown labels if they're missing. (Requires permission to change board structure)
    """
    create_labels_if_missing: Boolean

    """
    The group's unique identifier.
    """
    group_id: String

    """
    The new item's name.
    """
    item_name: String!

    """
    The position relative method to another item (before_at / after_at)
    """
    position_relative_method: PositionRelative

    """
    The item to set the position next to.
    """
    relative_to: ID
  ): Item

  """
  Create a new notification.
  """
  create_notification(
    """
    The target's unique identifier.
    """
    target_id: ID!

    """
    The target's type (Project / Post)
    """
    target_type: NotificationTargetType!

    """
    The notification text.
    """
    text: String!

    """
    The user's unique identifier.
    """
    user_id: ID!
  ): Notification

  """
  Create a new tag or get it if it already exists.
  """
  create_or_get_tag(
    """
    The private board id to create the tag at (not needed for public boards)
    """
    board_id: ID

    """
    The new tag's name.
    """
    tag_name: String
  ): Tag

  """
  Create subitem.
  """
  create_subitem(
    """
    The column values of the new item.
    """
    column_values: JSON

    """
    Create Status/Dropdown labels if they're missing. (Requires permission to change board structure)
    """
    create_labels_if_missing: Boolean

    """
    The new item's name.
    """
    item_name: String!

    """
    The parent item's unique identifier.
    """
    parent_item_id: ID!
  ): Item

  """
  Create a new update.
  """
  create_update(
    """
    The update text.
    """
    body: String!

    """
    The item's unique identifier.
    """
    item_id: ID

    """
    The parent post identifier.
    """
    parent_id: ID
  ): Update

  """
  Create a new webhook.
  """
  create_webhook(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The webhook config
    """
    config: JSON

    """
    The event to listen to
    """
    event: WebhookEventType!

    """
    The webhook URL.
    """
    url: String!
  ): Webhook

  """
  Create a new workspace.
  """
  create_workspace(
    """
    The Workspace's description
    """
    description: String

    """
    The workspace's kind (open / closed)
    """
    kind: WorkspaceKind!

    """
    The Workspace's name
    """
    name: String!
  ): Workspace

  """
  Delete a board.
  """
  delete_board(
    """
    The board's unique identifier
    """
    board_id: ID!
  ): Board

  """
  Delete a column.
  """
  delete_column(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The column's unique identifier.
    """
    column_id: String!
  ): Column

  """
  Delete a document block
  """
  delete_doc_block(
    """
    The block's unique identifier.
    """
    block_id: String!
  ): DocumentBlockIdOnly

  """
  Deletes a folder in a specific workspace.
  """
  delete_folder(
    """
    The folder's unique identifier.
    """
    folder_id: ID!
  ): Folder

  """
  Deletes a group in a specific board.
  """
  delete_group(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The group's unique identifier.
    """
    group_id: String!
  ): Group

  """
  Delete an item.
  """
  delete_item(
    """
    The item's unique identifier.
    """
    item_id: ID
  ): Item

  """
  Remove subscribers from the board.
  """
  delete_subscribers_from_board(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    User ids to unsubscribe from a board
    """
    user_ids: [ID!]!
  ): [User]

  """
  Remove team subscribers from the board.
  """
  delete_teams_from_board(
    """
    The board's unique identifier
    """
    board_id: ID!

    """
    Team ids to unsubscribe from a workspace
    """
    team_ids: [ID!]!
  ): [Team]

  """
  Delete teams from a workspace.
  """
  delete_teams_from_workspace(
    """
    Team ids to unsubscribe from a workspace
    """
    team_ids: [ID!]!

    """
    The workspace's unique identifier.
    """
    workspace_id: ID!
  ): [Team]

  """
  Delete an update.
  """
  delete_update(
    """
    The update's unique identifier.
    """
    id: ID!
  ): Update

  """
  Delete users from a workspace.
  """
  delete_users_from_workspace(
    """
    User ids to unsubscribe from a workspace
    """
    user_ids: [ID!]!

    """
    The workspace's unique identifier.
    """
    workspace_id: ID!
  ): [User]

  """
  Delete a new webhook.
  """
  delete_webhook(
    """
    The webhook's unique identifier.
    """
    id: ID!
  ): Webhook

  """
  Delete workspace.
  """
  delete_workspace(
    """
    The workspace's unique identifier
    """
    workspace_id: ID!
  ): Workspace

  """
  Duplicate a board.
  """
  duplicate_board(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    Optional the new board's name. If omitted then automatically generated
    """
    board_name: String

    """
    The duplication type.
    """
    duplicate_type: DuplicateBoardType!

    """
    Optional destination folder in destination workspace. Defaults to the original board folder.
    """
    folder_id: ID

    """
    Duplicate the subscribers to the new board. Defaults to false.
    """
    keep_subscribers: Boolean

    """
    Optional destination workspace. Defaults to the original board workspace.
    """
    workspace_id: ID
  ): BoardDuplication

  """
  Duplicate a group.
  """
  duplicate_group(
    """
    Should the new group be added to the top.
    """
    add_to_top: Boolean

    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The group's unique identifier.
    """
    group_id: String!

    """
    The group's title.
    """
    group_title: String
  ): Group

  """
  Duplicate an item.
  """
  duplicate_item(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The item's unique identifier. *Required
    """
    item_id: ID

    """
    Duplicate with the item's updates.
    """
    with_updates: Boolean
  ): Item

  """
  Increase operations counter
  """
  increase_app_subscription_operations(
    """
    Must be positive number.
    """
    increment_by: Int = 1

    """
    Operation name. A string of up to 14 characters containing alphanumeric characters and the symbols -_ 
    """
    kind: String = "global"
  ): AppSubscriptionOperationsCounter

  """
  Like an update.
  """
  like_update(
    """
    The update identifier.
    """
    update_id: ID
  ): Update

  """
  Move an item to a different board.
  """
  move_item_to_board(
    """
    The unique identifier of a target board.
    """
    board_id: ID!

    """
    Mapping of columns between the original board and target board
    """
    columns_mapping: [ColumnMappingInput!]

    """
    The unique identifier of a target group.
    """
    group_id: ID!

    """
    The unique identifier of an item to move.
    """
    item_id: ID!

    """
    Mapping of subitem columns between the original board and target board
    """
    subitems_columns_mapping: [ColumnMappingInput!]
  ): Item

  """
  Move an item to a different group.
  """
  move_item_to_group(
    """
    The group's unique identifier.
    """
    group_id: String!

    """
    The item's unique identifier.
    """
    item_id: ID
  ): Item

  """
  Remove mock app subscription for the current account
  """
  remove_mock_app_subscription(
    """
    The app id of the app to remove the mocked subscription for.
    """
    app_id: ID!

    """
    The last 10 characters of the app's signing secret.
    """
    partial_signing_secret: String!
  ): AppSubscription

  """
  Remove users from team.
  """
  remove_users_from_team(
    """
    The team's unique identifier.
    """
    team_id: ID!

    """
    User ids to add to/remove from the team
    """
    user_ids: [ID!]!
  ): ChangeTeamMembershipsResult

  """
  Set mock app subscription for the current account
  """
  set_mock_app_subscription(
    """
    The app id of the app to mock subscription for.
    """
    app_id: ID!

    """
    Billing period [monthly/yearly]
    """
    billing_period: String

    """
    Is the subscription a trial
    """
    is_trial: Boolean

    """
    The last 10 characters of the app's signing secret.
    """
    partial_signing_secret: String!

    """
    The plan id for the mocked plan
    """
    plan_id: String

    """
    Pricing plans version
    """
    pricing_version: Int

    """
    The subscription renewal date
    """
    renewal_date: Date
  ): AppSubscription

  """
  Update Board attribute.
  """
  update_board(
    """
    The board's attribute to update (name / description / communication)
    """
    board_attribute: BoardAttributes!

    """
    The board's unique identifier
    """
    board_id: ID!

    """
    The new attribute value.
    """
    new_value: String!
  ): JSON

  """
  Update a document block
  """
  update_doc_block(
    """
    The block's unique identifier.
    """
    block_id: String!

    """
    The block's content.
    """
    content: JSON!
  ): DocumentBlock

  """
  Updates a folder.
  """
  update_folder(
    """
    The folder's color.
    """
    color: FolderColor

    """
    The folder's custom icon.
    """
    custom_icon: FolderCustomIcon

    """
    The folder's unique identifier
    """
    folder_id: ID!

    """
    The folder's font weight.
    """
    font_weight: FolderFontWeight

    """
    The folder's name
    """
    name: String

    """
    The folder's parent folder.
    """
    parent_folder_id: ID
  ): Folder

  """
  Update an existing group.
  """
  update_group(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    The groups's attribute to update (title / color / position / relative_position_after / relative_position_before)
    """
    group_attribute: GroupAttributes!

    """
    The Group's unique identifier.
    """
    group_id: String!

    """
    The new attribute value.
    """
    new_value: String!
  ): Group

  """
  Update an existing workspace.
  """
  update_workspace(
    """
    The attributes of the workspace to update
    """
    attributes: UpdateWorkspaceAttributesInput!

    """
    The workspace ID.
    """
    id: ID
  ): Workspace

  """
  Use a template
  """
  use_template(
    """
    The board's kind (public / private / share)
    """
    board_kind: BoardKind

    """
    Optional board owner user ids
    """
    board_owner_ids: [Int]

    """
    Optional board owner team ids
    """
    board_owner_team_ids: [Int]

    """
    Optional board subscriber ids
    """
    board_subscriber_ids: [Int]

    """
    Optional list of subscriber team ids
    """
    board_subscriber_teams_ids: [Int]

    """
    The callback URL to send the workspace, boards and dashboards IDs result, after its completed in the background
    """
    callback_url_on_complete: String

    """
    The folder ID to duplicate the template to.
    """
    destination_folder_id: Int

    """
    The folder name to duplicate the template to, in case of multiple boards template
    """
    destination_folder_name: String

    """
    The name of the instance
    """
    destination_name: String

    """
    The workspace ID to duplicate the template to, If not defined, it will be created in Main Workspace
    """
    destination_workspace_id: Int

    """
    Skips target folder creation in multiple entities templates
    """
    skip_target_folder_creation: Boolean

    """
    The template ID
    """
    template_id: Int!
  ): Template
}

"""
A notification.
"""
type Notification {
  """
  The notification's unique identifier.
  """
  id: ID!

  """
  The notification text.
  """
  text: String
}

"""
The notification's target type.
"""
enum NotificationTargetType {
  """
  Update
  """
  Post

  """
  Item or Board.
  """
  Project
}

"""
Indicates where the unit symbol should be placed in a number value
"""
enum NumberValueUnitDirection {
  """
  The symbol is placed on the left of the number
  """
  left

  """
  The symbol is placed on the right of the number
  """
  right
}

type NumbersValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  Indicates where the symbol should be placed - on the right or left of the number
  """
  direction: NumberValueUnitDirection

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Number
  """
  number: Float

  """
  The symbol of the unit
  """
  symbol: String
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
The working status of a user.
"""
type OutOfOffice {
  """
  Is the status active?
  """
  active: Boolean

  """
  Are notification disabled?
  """
  disable_notifications: Boolean

  """
  The status end date.
  """
  end_date: Date

  """
  The status start date.
  """
  start_date: Date

  """
  Out of office type.
  """
  type: String
}

type PeopleEntity {
  """
  Id of the entity: a person or a team
  """
  id: ID!

  """
  Type of entity
  """
  kind: Kind
}

type PeopleValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The people and teams assigned to the item.
  """
  persons_and_teams: [PeopleEntity!]
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type PersonValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The person assigned to the item.
  """
  person_id: ID
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type PhoneValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  ISO-2 country code
  """
  country_short_name: String

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Phone number
  """
  phone: String
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A payment plan.
"""
type Plan {
  """
  The maximum users allowed in the plan.
  """
  max_users: Int!

  """
  The plan's time period.
  """
  period: String

  """
  The plan's tier.
  """
  tier: String

  """
  The plan's version.
  """
  version: Int!
}

"""
The position relative method.
"""
enum PositionRelative {
  """
  position after at the given entity.
  """
  after_at

  """
  position before at the given entity.
  """
  before_at
}

type ProgressValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
Get your data from monday.com
"""
type Query {
  """
  Get the connected account's information.
  """
  account: Account

  """
  Get a collection of installs of an app.
  """
  app_installs(
    """
    The id of an account to filter app installs by.
    """
    account_id: ID

    """
    The id of an application.
    """
    app_id: ID!

    """
    Number of items to get, the default is 25. Max: 100
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [AppInstall]

  """
  Get the current app subscription. Note: This query does not work in the playground
  """
  app_subscription: [AppSubscription]

  """
  Get operations counter current value
  """
  app_subscription_operations(
    """
    Operation name. A string of up to 14 characters containing alphanumeric characters and the symbols -_ 
    """
    kind: String = "global"
  ): AppSubscriptionOperationsCounter

  """
  Get apps monetization information for an account
  """
  apps_monetization_info: AppsMonetizationInfo

  """
  Get apps monetization status for an account
  """
  apps_monetization_status: AppMonetizationStatus

  """
  Get a collection of assets by ids.
  """
  assets(
    """
    Ids of the assets/files you want to get
    """
    ids: [ID!]!
  ): [Asset]

  """
  Get a collection of boards.
  """
  boards(
    """
    The board's kind (public / private / share)
    """
    board_kind: BoardKind

    """
    A list of boards unique identifiers.
    """
    ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Property to order by (created_at / used_at).
    """
    order_by: BoardsOrderBy

    """
    Page number to get, starting at 1.
    """
    page: Int = 1

    """
    The state of the board (all / active / archived / deleted), the default is active.
    """
    state: State = active

    """
    A list of workspace ids the boards are contained in.
    """
    workspace_ids: [ID]
  ): [Board]

  """
  Get the complexity data of your queries.
  """
  complexity: Complexity

  """
  Get a collection of docs.
  """
  docs(
    """
    A list of document unique identifiers.
    """
    ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    A list of associated board or objectâ€™s unique identifier.
    """
    object_ids: [ID!]

    """
    Property to order by (created_at / used_at).
    """
    order_by: DocsOrderBy

    """
    Page number to get, starting at 1.
    """
    page: Int = 1

    """
    A list of workspace ids the documents are contained in.
    """
    workspace_ids: [ID]
  ): [Document]

  """
  Get a collection of folders. Note: This query won't return folders from closed workspaces to which you are not subscribed
  """
  folders(
    """
    A list of folders unique identifiers.
    """
    ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1

    """
    A list of workspace unique identifiers to filter folders by workspaces. (pass null to include Main Workspace)
    """
    workspace_ids: [ID]
  ): [Folder]

  """
  Get a collection of items.
  """
  items(
    """
    Excludes items that are inactive, deleted or belong to deleted items
    """
    exclude_nonactive: Boolean

    """
    A list of items unique identifiers.
    """
    ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Get the recently created items at the top of the list
    """
    newest_first: Boolean

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Item]

  """
  Search items by multiple columns and values.
  """
  items_page_by_column_values(
    """
    The board's unique identifier.
    """
    board_id: ID!

    """
    One or more columns, and their values to search items by.
    """
    columns: [ItemsPageByColumnValuesQuery!]

    """
    An opaque token representing the position in the result set from which to
    resume fetching items. Use this to paginate through large result sets.
    """
    cursor: String

    """
    The maximum number of items to fetch in a single request. Use this to
    control the size of the result set and manage pagination. Maximum: 500.
    """
    limit: Int! = 25
  ): ItemsResponse!

  """
  Get the connected user's information.
  """
  me: User

  """
  Get next pages of board's items (rows) by cursor.
  """
  next_items_page(
    """
    An opaque token representing the position in the result set from which to
    resume fetching items. Use this to paginate through large result sets.
    """
    cursor: String!

    """
    The maximum number of items to fetch in a single request. Use this to
    control the size of the result set and manage pagination. Maximum: 500.
    """
    limit: Int! = 25
  ): ItemsResponse!

  """
  Get a collection of tags.
  """
  tags(
    """
    A list of tags unique identifiers.
    """
    ids: [ID!]
  ): [Tag]

  """
  Get a collection of teams.
  """
  teams(
    """
    A list of teams unique identifiers.
    """
    ids: [ID!]
  ): [Team]

  """
  Get a collection of updates.
  """
  updates(
    """
    A list of items unique identifiers.
    """
    ids: [ID!]

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Update]

  """
  Get a collection of users.
  """
  users(
    """
    A list of users' emails.
    """
    emails: [String]

    """
    A list of users' unique identifiers.
    """
    ids: [ID!]

    """
    The kind to search users by (all / non_guests / guests / non_pending).
    """
    kind: UserKind

    """
    Number of users to get.
    """
    limit: Int

    """
    Allows to fuzzy search by name
    """
    name: String

    """
    Get the recently created users at the top of the list
    """
    newest_first: Boolean

    """
    Return non active users in the account.
    """
    non_active: Boolean

    """
    Page number to get, starting at 1.
    """
    page: Int
  ): [User]

  """
  Get the API version in use
  """
  version: Version!

  """
  Get a list containing the versions of the API
  """
  versions: [Version!]!

  """
  Get a collection of webhooks for the board
  """
  webhooks(
    """
    Filters webhooks that were created by the app initiating the request
    """
    app_webhooks_only: Boolean

    """
    Board unique identifier.
    """
    board_id: ID!
  ): [Webhook]

  """
  Get a collection of workspaces.
  """
  workspaces(
    """
    A list of workspace unique identifiers.
    """
    ids: [ID!]

    """
    The workspace's kind (open / closed)
    """
    kind: WorkspaceKind

    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Property to order by (created_at).
    """
    order_by: WorkspacesOrderBy

    """
    Page number to get, starting at 1.
    """
    page: Int = 1

    """
    The state of the workspace (all / active / archived / deleted), the default is active.
    """
    state: State = active
  ): [Workspace]
}

type RatingValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Rating value
  """
  rating: Int
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A reply for an update.
"""
type Reply {
  """
  The reply's html formatted body.
  """
  body: String!

  """
  The reply's creation date.
  """
  created_at: Date

  """
  The reply's creator.
  """
  creator: User

  """
  The unique identifier of the reply creator.
  """
  creator_id: String

  """
  The reply's unique identifier.
  """
  id: ID!

  """
  The reply's text body.
  """
  text_body: String

  """
  The reply's last edit date.
  """
  updated_at: Date
}

"""
The possible states for a board or item.
"""
enum State {
  """
  Active only (Default).
  """
  active

  """
  Active, Archived and Deleted.
  """
  all

  """
  Archived only.
  """
  archived

  """
  Deleted only.
  """
  deleted
}

"""
A status label style.
"""
type StatusLabelStyle {
  """
  The label's border color in hex format.
  """
  border: String!

  """
  The label's color in hex format.
  """
  color: String!
}

type StatusValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The index of the status in the board
  """
  index: Int

  """
  Whether the status is done
  """
  is_done: Boolean

  """
  The label of the status
  """
  label: String

  """
  The style of the status label
  """
  label_style: StatusLabelStyle
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The ID of an update attached to the status
  """
  update_id: ID

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type SubtasksValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  A string representing all the names of the subtasks, separated by commas
  """
  display_value: String!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The subitems
  """
  subitems: [Item!]!

  """
  The subitems IDs
  """
  subitems_ids: [ID!]!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A tag
"""
type Tag {
  """
  The tag's color.
  """
  color: String!

  """
  The tag's unique identifier.
  """
  id: ID!

  """
  The tag's name.
  """
  name: String!
}

type TagsValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Tag ID's
  """
  tag_ids: [Int!]!

  """
  A list of tags
  """
  tags: [Tag!]!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A team of users.
"""
type Team {
  """
  The team's unique identifier.
  """
  id: ID!

  """
  The team's name.
  """
  name: String!

  """
  The users who are the owners of the team.
  """
  owners(
    """
    A list of users' unique identifiers.
    """
    ids: [ID!]
  ): [User!]!

  """
  The team's picture url.
  """
  picture_url: String

  """
  The users in the team.
  """
  users(
    """
    A list of users' emails.
    """
    emails: [String]

    """
    A list of users' unique identifiers.
    """
    ids: [ID!]

    """
    The kind to search users by (all / non_guests / guests / non_pending).
    """
    kind: UserKind

    """
    Number of users to get.
    """
    limit: Int

    """
    Allows to fuzzy search by name
    """
    name: String

    """
    Get the recently created users at the top of the list
    """
    newest_first: Boolean

    """
    Return non active users in the account.
    """
    non_active: Boolean

    """
    Page number to get, starting at 1.
    """
    page: Int
  ): [User]
}

type TeamValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  ID of the assigned team
  """
  team_id: Int
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A monday.com template.
"""
type Template {
  """
  The template process unique identifier for async operations.
  """
  process_id: String
}

type TextValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The column's textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

type TimeTrackingHistoryItem {
  """
  When the session was added to the cell
  """
  created_at: Date!

  """
  Only applicable if the session has ended
  """
  ended_at: Date

  """
  The identifier of an user which ended the tracking
  """
  ended_user_id: ID

  """
  A unique session identifier
  """
  id: ID!

  """
  Is true if the session end date was manually entered
  """
  manually_entered_end_date: Boolean!

  """
  Is true if the session end time was manually entered
  """
  manually_entered_end_time: Boolean!

  """
  Is true if the session start date was manually entered
  """
  manually_entered_start_date: Boolean!

  """
  Is true if the session start time was manually entered
  """
  manually_entered_start_time: Boolean!

  """
  Only applicable if the session was added by pressing the play button or via automation
  """
  started_at: Date

  """
  The identifier of an user which started the tracking
  """
  started_user_id: ID

  """
  The status of the session
  """
  status: String!

  """
  When the session was updated
  """
  updated_at: Date
}

type TimeTrackingValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  Total duration of the time tracker
  """
  duration: Int
  history: [TimeTrackingHistoryItem!]!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Whether the time tracker is running
  """
  running: Boolean

  """
  The date when the time tracker was started
  """
  started_at: Date
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date
  value: JSON
}

type TimelineValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The start date of the timeline
  """
  from: Date

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The range of dates representing the timeline (YYYY-MM-DD)
  """
  text: String

  """
  The end date of the timeline
  """
  to: Date

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON

  """
  The visualization type for the timeline
  """
  visualization_type: String
}

type UnsupportedValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!

  """
  Text representation of the column value. Note: Not all columns support textual value
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
An update.
"""
type Update {
  """
  The update's assets/files.
  """
  assets: [Asset]

  """
  The update's html formatted body.
  """
  body: String!

  """
  The update's creation date.
  """
  created_at: Date

  """
  The update's creator.
  """
  creator: User

  """
  The unique identifier of the update creator.
  """
  creator_id: String

  """
  The update's unique identifier.
  """
  id: ID!

  """
  The update's item ID.
  """
  item_id: String

  """
  The update's replies.
  """
  replies: [Reply]

  """
  The update's text body.
  """
  text_body: String

  """
  The update's last edit date.
  """
  updated_at: Date
}

"""
Attributes of a workspace to update
"""
input UpdateWorkspaceAttributesInput {
  """
  The description of the workspace to update
  """
  description: String

  """
  The kind of the workspace to update (open / closed)
  """
  kind: WorkspaceKind

  """
  The name of the workspace to update
  """
  name: String
}

"""
A monday.com user.
"""
type User {
  """
  The user's account.
  """
  account: Account!

  """
  The user's birthday.
  """
  birthday: Date

  """
  The user's country code.
  """
  country_code: String

  """
  The user's creation date.
  """
  created_at: Date

  """
  The current user's language
  """
  current_language: String

  """
  The user's email.
  """
  email: String!

  """
  Is the user enabled or not.
  """
  enabled: Boolean!

  """
  The user's unique identifier.
  """
  id: ID!

  """
  Is the user an account admin.
  """
  is_admin: Boolean

  """
  Is the user a guest or not.
  """
  is_guest: Boolean

  """
  Is the user a pending user
  """
  is_pending: Boolean

  """
  Is user verified his email.
  """
  is_verified: Boolean

  """
  Is the user a view only user or not.
  """
  is_view_only: Boolean

  """
  The date the user joined the account.
  """
  join_date: Date

  """
  Last date & time when user was active
  """
  last_activity: Date

  """
  The user's location.
  """
  location: String

  """
  The user's mobile phone number.
  """
  mobile_phone: String

  """
  The user's name.
  """
  name: String!

  """
  The user's out of office status.
  """
  out_of_office: OutOfOffice

  """
  The user's phone number.
  """
  phone: String

  """
  The user's photo in the original size.
  """
  photo_original: String

  """
  The user's photo in small size (150x150).
  """
  photo_small: String

  """
  The user's photo in thumbnail size (100x100).
  """
  photo_thumb: String

  """
  The user's photo in small thumbnail size (50x50).
  """
  photo_thumb_small: String

  """
  The user's photo in tiny size (30x30).
  """
  photo_tiny: String

  """
  The product to which the user signed up to first.
  """
  sign_up_product_kind: String

  """
  The teams the user is a member in.
  """
  teams(
    """
    A list of teams unique identifiers.
    """
    ids: [ID!]
  ): [Team]

  """
  The user's timezone identifier.
  """
  time_zone_identifier: String

  """
  The user's title.
  """
  title: String

  """
  The user's profile url.
  """
  url: String!

  """
  The userâ€™s utc hours difference.
  """
  utc_hours_diff: Int
}

"""
The possibilities for a user kind.
"""
enum UserKind {
  """
  All users in account.
  """
  all

  """
  Only guests.
  """
  guests

  """
  Only company members.
  """
  non_guests

  """
  All non pending members.
  """
  non_pending
}

"""
An object containing the API version details
"""
type Version {
  """
  The display name of the API version
  """
  display_name: String!

  """
  The type of the API version
  """
  kind: VersionKind!

  """
  Version string that can be used in API-Version header
  """
  value: String!
}

"""
All possible API version types
"""
enum VersionKind {
  """
  Current version
  """
  current

  """
  No longer supported version. Migrate to current version as soon as possible
  """
  deprecated

  """
  Bleeding-edge rolling version that constantly changes
  """
  dev

  """
  Previous version. Migrate to current version as soon as possible
  """
  maintenance

  """
  Old version that will be deprecated in January. Migrate to current version as soon as possible
  """
  old__maintenance

  """
  Old version that will be deprecated in January. Migrate to current version as soon as possible
  """
  old_previous_maintenance

  """
  Older version that will be deprecated in January. Migrate to current version as soon as possible
  """
  previous_maintenance

  """
  Next version
  """
  release_candidate
}

type VoteValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON

  """
  The total number of votes
  """
  vote_count: Int!

  """
  A list of IDs of users who voted
  """
  voter_ids: [ID!]!

  """
  A list of users who voted
  """
  voters: [User!]!
}

"""
Monday webhooks
"""
type Webhook {
  """
  The webhooks's board id.
  """
  board_id: ID!

  """
  The webhooks's config.
  """
  config: String

  """
  The event webhook will listen to
  """
  event: WebhookEventType!

  """
  The webhooks's unique identifier.
  """
  id: ID!
}

"""
The webhook's target type.
"""
enum WebhookEventType {
  """
  Column value changed on board
  """
  change_column_value

  """
  An item name changed on board
  """
  change_name

  """
  Specific Column value changed on board
  """
  change_specific_column_value

  """
  Status column value changed on board
  """
  change_status_column_value

  """
  Column value changed on board subitem
  """
  change_subitem_column_value

  """
  An subitem name changed on board
  """
  change_subitem_name

  """
  Column created on a board
  """
  create_column

  """
  An item was created on board
  """
  create_item

  """
  A subitem was created on a board
  """
  create_subitem

  """
  An update was posted on board subitem
  """
  create_subitem_update

  """
  An update was posted on board item
  """
  create_update

  """
  An update was deleted from board item
  """
  delete_update

  """
  An update was edited on board item
  """
  edit_update

  """
  An item was archived on a board
  """
  item_archived

  """
  An item was deleted from a board
  """
  item_deleted

  """
  An item is moved to any group
  """
  item_moved_to_any_group

  """
  An item is moved to a specific group
  """
  item_moved_to_specific_group

  """
  An item restored back to board
  """
  item_restored

  """
  A subitem is moved from one parent to another
  """
  move_subitem

  """
  A subitem was archived on a board
  """
  subitem_archived

  """
  A subitem was deleted from a board
  """
  subitem_deleted
}

type WeekValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The end date of the week
  """
  end_date: Date

  """
  The column's unique identifier.
  """
  id: ID!

  """
  The start date of the week
  """
  start_date: Date

  """
  The range of dates representing the week (YYYY-MM-DD)
  """
  text: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The column's raw value in JSON format.
  """
  value: JSON
}

"""
A monday.com workspace.
"""
type Workspace {
  """
  The account product that contains workspace.
  """
  account_product: AccountProduct

  """
  The workspace's creation date.
  """
  created_at: Date

  """
  The workspace's description.
  """
  description: String

  """
  The workspace's unique identifier.
  """
  id: ID

  """
  Returns true if it is the default workspace of the product or account
  """
  is_default_workspace: Boolean

  """
  The workspace's kind (open / closed).
  """
  kind: WorkspaceKind

  """
  The workspace's name.
  """
  name: String!

  """
  The workspace's user owners.
  """
  owners_subscribers(
    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [User]

  """
  The workspace's settings.
  """
  settings: WorkspaceSettings

  """
  The workspace's state (all / active / archived / deleted).
  """
  state: State

  """
  The workspace's team owners.
  """
  team_owners_subscribers(
    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Team!]

  """
  The teams subscribed to the workspace.
  """
  teams_subscribers(
    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [Team]

  """
  The users subscribed to the workspace
  """
  users_subscribers(
    """
    Number of items to get, the default is 25.
    """
    limit: Int = 25

    """
    Page number to get, starting at 1.
    """
    page: Int = 1
  ): [User]
}

"""
The workspace's icon.
"""
type WorkspaceIcon {
  """
  The icon color in hex value. Used as a background for the image.
  """
  color: String

  """
  The public image URL, which is temporary in the case of a file that was
  uploaded by the user, so you'll need to pull a new version at least once an hour.
                                 In case it is null, you can use the first letter of the workspace name.
  """
  image: String
}

"""
The workspace kinds available.
"""
enum WorkspaceKind {
  """
  Closed workspace, available to enterprise only.
  """
  closed

  """
  Open workspace.
  """
  open
}

"""
The workspace's settings.
"""
type WorkspaceSettings {
  """
  The workspace icon.
  """
  icon: WorkspaceIcon
}

"""
The workspace subscriber kind.
"""
enum WorkspaceSubscriberKind {
  """
  Workspace owner.
  """
  owner

  """
  Workspace subscriber.
  """
  subscriber
}

"""
Options to order by.
"""
enum WorkspacesOrderBy {
  """
  The rank order of the workspace creation time (desc).
  """
  created_at
}

type WorldClockValue implements ColumnValue {
  """
  The column that this value belongs to.
  """
  column: Column!

  """
  The column's unique identifier.
  """
  id: ID!
  text: String

  """
  Timezone
  """
  timezone: String

  """
  The column's type.
  """
  type: ColumnType!

  """
  The date when column value was last updated.
  """
  updated_at: Date

  """
  The column's raw value in JSON format.
  """
  value: JSON
}
